pool:
  vmImage: 'VS2017-Win2016'

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

  #Pack1 -------------------
  #JwtBearer
  #Jwtbearer.Cookies
  #ExceptionHandling
  #Identity
  #ScopedRoleAssignmentProvider
  #WebApiConfiguration
  #WebApiConfiguration.SecurityProvider
  #WebApplicationConfiguration
  Pack1Version: '1.4.5'
  Pack1PushToNuget: True

steps:
# Install NuGet Tool
- task: NuGetToolInstaller@0
  displayName: Install NuGet Tool

# Restore NuGet packages
- task: NuGetCommand@2
  displayName: Restore NuGet Packages
  inputs:
    restoreSolution: '$(solution)'

# Prepare analysis on SonarCloud
- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  displayName: Prepare analysis on SonarCloud
  inputs:
    SonarCloud: 'apikey-sonar-aspnetcore'
    organization: 'ivanborges-github'
    projectKey: 'ivanborges_furiza-aspnetcore'
    projectName: 'furiza-aspnetcore'

# Build solution
- task: VSBuild@1
  displayName: Build Solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run unit tests
- task: VSTest@2
  displayName: Run Unit Tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run Code Analysis
- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
  displayName: Run Code Analysis

# Publish Quality Gate Result
- task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
  displayName: Publish Quality Gate Result

# Prepare publish files
- task: DotNetCoreCLI@2
  displayName: Prepare Publish Files
  inputs:
    command: publish
    publishWebProjects: False
    projects: '**/**/Furiza.AspNetCore.*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: False

# Publish the artifacts
- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts

# Publish Furiza.AspNetCore.Authentication.JwtBearer to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.Authentication.JwtBearer
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.Authentication.JwtBearer.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.Authentication.JwtBearer to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.Authentication.JwtBearer.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-authentication.jwtbearer'

# Publish Furiza.AspNetCore.Authentication.JwtBearer.Cookies to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.Authentication.JwtBearer.Cookies
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.Authentication.JwtBearer.Cookies.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.Authentication.JwtBearer.Cookies to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.Authentication.JwtBearer.Cookies.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-authentication.jwtbearer.cookies'

# Publish Furiza.AspNetCore.ExceptionHandling to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.ExceptionHandling
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.ExceptionHandling.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.ExceptionHandling to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.ExceptionHandling.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-exceptionhandling'

# Publish Furiza.AspNetCore.Identity.EntityFrameworkCore to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.Identity.EntityFrameworkCore
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.Identity.EntityFrameworkCore.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.Identity.EntityFrameworkCore to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.Identity.EntityFrameworkCore.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-identity.entityframeworkcore'

# Publish Furiza.AspNetCore.ScopedRoleAssignmentProvider to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.ScopedRoleAssignmentProvider
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.ScopedRoleAssignmentProvider.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.ScopedRoleAssignmentProvider to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.ScopedRoleAssignmentProvider.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-scopedroleassignmentprovider'

# Publish Furiza.AspNetCore.WebApiConfiguration to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.WebApiConfiguration
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.WebApiConfiguration.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.WebApiConfiguration to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.WebApiConfiguration.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-webapiconfiguration'

# Publish Furiza.AspNetCore.WebApiConfiguration.SecurityProvider to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.WebApiConfiguration.SecurityProvider
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.WebApiConfiguration.SecurityProvider.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.WebApiConfiguration.SecurityProvider to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.WebApiConfiguration.SecurityProvider.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-webapiconfiguration.securityprovider'

# Publish Furiza.AspNetCore.WebApplicationConfiguration to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.AspNetCore.WebApplicationConfiguration
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.AspNetCore.WebApplicationConfiguration.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.AspNetCore.WebApplicationConfiguration to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.AspNetCore.WebApplicationConfiguration.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-aspnetcore-webapplicationconfiguration'
